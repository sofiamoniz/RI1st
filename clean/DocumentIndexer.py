from CorpusReader import CorpusReader
from Indexer import Indexer
from Results import Results
import time
import sys, getopt

def main(argv):

    # Get the parameters and start the process:
    input_file = ''

    try:
        opts,args = getopt.getopt(argv,"hs:i:",["sfile=","ifile="])
    except getopt.GetoptError:
        print ('DocumentIndexer.py -s <fileToRead>')
        print ('DocumentIndexer.py -i <fileToRead>')
        sys.exit(2)
    for opt, arg in opts:
        if opt == '-h':
            print ('DocumentIndexer.py -s <fileToRead>\nor DocumentIndexer.py -i <fileToRead>')
            sys.exit()
        elif opt == '':
            print ('DocumentIndexer.py -s <fileToRead>\nDocumentIndexer.py -i <fileToRead>')
            sys.exit()
        elif opt in ("-s", "--sfile"):
            input_file = arg
            document_indexer(input_file,'s')
        elif opt in ("-i", "--ifile"):
            input_file = arg
            document_indexer(input_file,'i')



def document_indexer(input_file,tokenizer_type):

    doc_ids={}
    total_docs=0
    total_terms=0
    indexing_time=0

    corpusReader = CorpusReader(input_file,tokenizer_type) ## Corpus Reader with Tokenization
    corpus,real_doc_ids=corpusReader.read_content() # corpus: [[doc1_terms_after_tokenization],[doc2_terms_after_tokenization]...]
                                                    # real_doc_ids: [real_doc1_id,real_doc2_id,...]
                                                    # in python, the order of an array is mantained, so no problem!
    total_docs=len(corpus)
    for j in range(total_docs):
        total_terms=+len(corpus[j])

    indexer = Indexer() ## Indexer
    start_time = time.time()
    for i in range(total_docs):   # Index one document at a time. The id's are auto generated by incrementation, starting at id=1 
        generated_id=i+1 
        indexer.index_document(corpus[i],generated_id)
        doc_ids[generated_id]=real_doc_ids[i]
    indexer.sort_inverted_index() ## All documents have been indexed and the final Inverted Indexer created!
    indexing_time=time.time()-start_time
    #indexer.show_inverted_index() 
    inverted_index=indexer.get_inverted_index()

    results = Results(inverted_index,doc_ids,tokenizer_type) ## Results ( writes informations to files )
    results.write_document_ids_to_file()
    results.write_index_to_file()
    results.print_table_for_inverted_index()
    
    # Print results:
    if(tokenizer_type=="s"):
        print("\n    Tokenizer used: Simple \n"
                +"\n--- Number of documents:  %s documents." % (total_docs) 
                +"\n--- Total number of terms: %d terms." % (total_terms)
                +"\n--- Indexation time:  %s seconds." % (indexing_time)
                + "\n--- Directory with the Inverted Index: results/simpleTokenizer"
                + "\n--- Directory that contains the real document Id's and auto generated ones: results\n")
    else:
        print("\n    Tokenizer used: Improved \n"
                +"\n--- Number of documents:  %s documents." % (total_docs) 
                +"\n--- Total number of terms: %d terms." % (total_terms)
                +"\n--- Indexation time:  %s seconds." % (indexing_time)
                + "\n--- Directory with the Inverted Index: results/improvedTokenizer"
                + "\n--- Directory that contains the real document Id's and auto generated ones: results\n")
    



if __name__ == '__main__':
    main(sys.argv[1:])